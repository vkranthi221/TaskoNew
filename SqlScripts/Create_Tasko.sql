----------------------------------------------------------------------------------------------------------
--------------------------- All Copy Rights are reserved to Tasko.in--------------------------------------
USE [Tasko]
GO
----------------------------------------------------------------------------------------------------------

GO
CREATE TABLE [dbo].[SERVICES]( 
	[SERVICE_ID] Binary (16) NOT NULL ,
	[NAME] VARCHAR(MAX) NOT NULL,
	[PARENT_SERVICE_ID] Binary (16) NULL ,
	[IMAGE_URL] VARCHAR(MAX) NULL,
	[STATUS] INT NOT NULL
    CONSTRAINT [SERVICES_PK] PRIMARY KEY CLUSTERED(SERVICE_ID))
GO

/****** Object:  ForeignKey [FK_ParentService]    Script Date: 05/12/2016 08:57:10 ******/
ALTER TABLE [dbo].[SERVICES]  WITH CHECK ADD  CONSTRAINT [PARENT_SERVICE_ID_FK] FOREIGN KEY([PARENT_SERVICE_ID])
REFERENCES [dbo].[SERVICES] ([SERVICE_ID])
GO
ALTER TABLE [dbo].[SERVICES] CHECK CONSTRAINT [PARENT_SERVICE_ID_FK]
GO

CREATE TABLE [dbo].[LOGGEDON_USER](
	[USER_ID] [binary](16) NOT NULL,
	[AUTH_CODE] [binary](16) NOT NULL
) ON [PRIMARY]

GO

CREATE TABLE [dbo].[Auth_Code](
	[code] [binary](16) NULL
) ON [PRIMARY]

GO

CREATE TABLE [dbo].[ADDRESS](
	[Address_ID] [binary](16) NOT NULL,
	[COUNTRY] [nvarchar](max) NULL,
	[STATE] [nvarchar](max) NULL,
	[LATITIUDE] [nvarchar](max) NULL,
	[LONGITUDE] [nvarchar](max) NULL,
	[LOCALITY] [nvarchar](max) NULL,
	[CITY] [nvarchar](max) NULL,
	[ADDRESS] [nvarchar](max) NULL,
	[PINCODE] [nvarchar](max) NULL,
 CONSTRAINT [PK_ADDRESS] PRIMARY KEY CLUSTERED ([Address_ID]))

GO

CREATE TABLE [dbo].[ORDER_STATUS](
	[ORDER_STATUS_ID] int NOT NULL,
	[NAME] VARCHAR(MAX) NOT NULL,
    CONSTRAINT [ORDER_STATUS_PK] PRIMARY KEY CLUSTERED(ORDER_STATUS_ID))
GO
    
CREATE TABLE [dbo].[ISSUES](
	[ISSUE_ID] Binary(16) NOT NULL,
	[NAME] VARCHAR(MAX) NOT NULL,
    CONSTRAINT [ISSUES_PK] PRIMARY KEY CLUSTERED(ISSUE_ID))
GO

CREATE TABLE [dbo].[ID_PROOFS](
	[ID_PROOF_ID] Binary(16) NOT NULL,
	[NAME] VARCHAR(MAX) NOT NULL,
 CONSTRAINT [ID_PROOFS_PK] PRIMARY KEY CLUSTERED(ID_PROOF_ID))

GO
CREATE TABLE [dbo].[VENDOR](
	[VENDOR_ID] [binary](16) NOT NULL,
	[USER_NAME] [varchar](max) NOT NULL,
	[NAME] [varchar](max) NOT NULL,
	[MOBILE_NUMBER] [varchar](50) NOT NULL,
	[PASSWORD] [varchar](max) NOT NULL,
	[EMAIL_ADDRESS] [varchar](max) NULL,
	[ADDRESS_ID] [binary](16) NULL,
	[PHOTO] [varchar](max) NULL,
	[EMPLOYEE_COUNT] [int] NOT NULL,
	[BASE_RATE] [decimal](18, 0) NOT NULL,
	[IS_VENDOR_VERIFIED] [bit] NOT NULL,
	[IS_VENDOR_LIVE] [bit] NOT NULL,
	[TIME_SPENT_ON_APP] [time](7) NULL,
	[ACTIVE_TIME_PER_DAY] [time](7) NULL,
	[DATA_CONSUMPTION] [decimal](18, 0) NULL,
	[CALLS_TO_CUSTOMER_CARE] [int] NULL,
	[DATE_OF_BIRTH] [datetime] NULL,
	[GENDER] [smallint] NULL,
	[ARE_ORDERS_BLOCKED] [bit] NULL,
	[IS_BLOCKED] [bit] NULL,
	[MONTHLY_CHARGE] [decimal](18, 0) NULL,
	[IS_POWER_SELLER] [bit] NULL,
	[VENDOR_REF_ID] [int] IDENTITY(1,1) NOT NULL,
	[REGISTERED_DATE] [datetime] NOT NULL,
	[DUE_DATE] [datetime] NULL,
 CONSTRAINT [VENDOR_PK] PRIMARY KEY CLUSTERED 
(
	[VENDOR_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

ALTER TABLE [dbo].[VENDOR] ADD  CONSTRAINT [DF_VENDOR_REGISTERED_DATE]  DEFAULT (getdate()) FOR [REGISTERED_DATE]
GO

ALTER TABLE [dbo].[VENDOR]  WITH CHECK ADD  CONSTRAINT [FK_VENDOR_ADDRESS] FOREIGN KEY([ADDRESS_ID])
REFERENCES [dbo].[ADDRESS] ([Address_ID])
GO

ALTER TABLE [dbo].[VENDOR] CHECK CONSTRAINT [FK_VENDOR_ADDRESS]
GO

CREATE TABLE [dbo].[VENDOR_SERVICES](
	[VENDOR_SERVICE_ID] Binary(16) NOT NULL,
	[VENDOR_ID] Binary(16) NOT NULL,
	[SERVICE_ID] Binary(16) NOT NULL,
	[IS_VENDOR_SERVICE_ACTIVE] bit NOT NULL,
    CONSTRAINT [VENDOR_SERVICES_PK] PRIMARY KEY CLUSTERED(VENDOR_SERVICE_ID))   
GO

/****** Object:  ForeignKey [VENDOR_SERVICES_SERVICES_FK]    Script Date: 05/12/2016 08:57:10 ******/
ALTER TABLE [dbo].[VENDOR_SERVICES]  WITH CHECK ADD  CONSTRAINT [VENDOR_SERVICES_SERVICES_FK] FOREIGN KEY([SERVICE_ID])
REFERENCES [dbo].[SERVICES] ([SERVICE_ID])
GO
ALTER TABLE [dbo].[VENDOR_SERVICES] CHECK CONSTRAINT [VENDOR_SERVICES_SERVICES_FK]
GO

/****** Object:  ForeignKey [VENDOR_SERVICES_VENDOR_FK]    Script Date: 05/12/2016 08:57:10 ******/
ALTER TABLE [dbo].[VENDOR_SERVICES]  WITH CHECK ADD  CONSTRAINT [VENDOR_SERVICES_VENDOR_FK] FOREIGN KEY([VENDOR_ID])
REFERENCES [dbo].[VENDOR] ([VENDOR_ID])
GO
ALTER TABLE [dbo].[VENDOR_SERVICES] CHECK CONSTRAINT [VENDOR_SERVICES_VENDOR_FK]
GO

CREATE TABLE [dbo].[VENDOR_PROOF](
	[VENDOR_PROOF_ID] Binary(16) NOT NULL,
	[VENDOR_ID] Binary(16) NOT NULL,
	[ID_PROOF_ID] Binary(16) NOT NULL,
	[PROOF] VARCHAR(MAX) NOT NULL,
    CONSTRAINT [VENDOR_PROOF_PK] PRIMARY KEY CLUSTERED(VENDOR_PROOF_ID))
GO

/****** Object:  ForeignKey [VENDOR_PROOF_ID_PROOFS_FK]    Script Date: 05/12/2016 08:57:10 ******/
ALTER TABLE [dbo].[VENDOR_PROOF]  WITH CHECK ADD  CONSTRAINT [VENDOR_PROOF_ID_PROOFS_FK] FOREIGN KEY([ID_PROOF_ID])
REFERENCES [dbo].[ID_PROOFS] ([ID_PROOF_ID])
GO
ALTER TABLE [dbo].[VENDOR_PROOF] CHECK CONSTRAINT [VENDOR_PROOF_ID_PROOFS_FK]
GO

/****** Object:  ForeignKey [VENDOR_PROOF_VENDOR_FK]    Script Date: 05/12/2016 08:57:10 ******/
ALTER TABLE [dbo].[VENDOR_PROOF]  WITH CHECK ADD  CONSTRAINT [VENDOR_PROOF_VENDOR_FK] FOREIGN KEY([VENDOR_ID])
REFERENCES [dbo].[VENDOR] ([VENDOR_ID])
GO
ALTER TABLE [dbo].[VENDOR_PROOF] CHECK CONSTRAINT [VENDOR_PROOF_VENDOR_FK]
GO

CREATE TABLE [dbo].[VENDOR_ISSUES](
	[VENDOR_ISSUE_ID] Binary(16) NOT NULL,
	[VENDOR_ID] Binary(16) NOT NULL,
	[CUSTOMER_ID] Binary(16) NOT NULL,
	[ISSUE_ID] Binary(16) NOT NULL,
	[COMMENTS] VARCHAR(MAX) NULL,
    CONSTRAINT [VENDOR_ISSUES_PK] PRIMARY KEY CLUSTERED(VENDOR_ISSUE_ID))
GO

/****** Object:  ForeignKey [VENDOR_ISSUES_ISSUES_FK]    Script Date: 05/12/2016 08:57:10 ******/
ALTER TABLE [dbo].[VENDOR_ISSUES]  WITH CHECK ADD  CONSTRAINT [VENDOR_ISSUES_ISSUES_FK] FOREIGN KEY([ISSUE_ID])
REFERENCES [dbo].[ISSUES] ([ISSUE_ID])
GO
ALTER TABLE [dbo].[VENDOR_ISSUES] CHECK CONSTRAINT [VENDOR_ISSUES_ISSUES_FK]
GO

/****** Object:  ForeignKey [VENDOR_ISSUES_VENDOR_FK]    Script Date: 05/12/2016 08:57:10 ******/
ALTER TABLE [dbo].[VENDOR_ISSUES]  WITH CHECK ADD  CONSTRAINT [VENDOR_ISSUES_VENDOR_FK] FOREIGN KEY([VENDOR_ID])
REFERENCES [dbo].[VENDOR] ([VENDOR_ID])
GO
ALTER TABLE [dbo].[VENDOR_ISSUES] CHECK CONSTRAINT [VENDOR_ISSUES_VENDOR_FK]
GO

CREATE TABLE [dbo].[CUSTOMER](
	[CUSTOMER_ID] Binary(16) NOT NULL,
	[NAME] VARCHAR(MAX) NOT NULL,
	[EMAIL_ADDRESS] VARCHAR(MAX) NOT NULL,
	[MOBILE_NUMBER] VARCHAR(MAX) NOT NULL,
	[STATUS] smallint NOT NULL
 CONSTRAINT [CUSTOMER_PK] PRIMARY KEY CLUSTERED(CUSTOMER_ID))
 
GO

CREATE TABLE [dbo].[ORDER](
	[ORDER_ID] [varchar](50) NOT NULL,
	[VENDOR_SERVICE_ID] [binary](16) NOT NULL,
	[CUSTOMER_ID] [binary](16) NOT NULL,
	[REQUESTED_DATE] [datetime] NOT NULL,
	[ORDER_STATUS_ID] [int] NOT NULL,
	[ORDER_LOCATION] [varchar](max) NULL,
	[SOURCE_ADDRESS_ID] [binary](16) NOT NULL,
	[DESTINATION_ADDRESS_ID] [binary](16) NOT NULL,
	[COMMENTS] nVarchar(max) NULL,
	[AMOUNT] [decimal](18, 0) NULL
 CONSTRAINT [ORDER_PK] PRIMARY KEY CLUSTERED ([ORDER_ID] ASC))

GO

SET ANSI_PADDING OFF
GO

ALTER TABLE [dbo].[ORDER]  WITH CHECK ADD  CONSTRAINT [FK_ORDER_ADDRESS] FOREIGN KEY([SOURCE_ADDRESS_ID])
REFERENCES [dbo].[ADDRESS] ([Address_ID])
GO

ALTER TABLE [dbo].[ORDER] CHECK CONSTRAINT [FK_ORDER_ADDRESS]
GO

ALTER TABLE [dbo].[ORDER]  WITH CHECK ADD  CONSTRAINT [FK_ORDER_ADDRESS1] FOREIGN KEY([DESTINATION_ADDRESS_ID])
REFERENCES [dbo].[ADDRESS] ([Address_ID])
GO

ALTER TABLE [dbo].[ORDER] CHECK CONSTRAINT [FK_ORDER_ADDRESS1]
GO

ALTER TABLE [dbo].[ORDER]  WITH CHECK ADD  CONSTRAINT [ORDER_CUSTOMER_FK] FOREIGN KEY([CUSTOMER_ID])
REFERENCES [dbo].[CUSTOMER] ([CUSTOMER_ID])
GO

ALTER TABLE [dbo].[ORDER] CHECK CONSTRAINT [ORDER_CUSTOMER_FK]
GO

ALTER TABLE [dbo].[ORDER]  WITH CHECK ADD  CONSTRAINT [ORDER_ORDER_STATUS_FK] FOREIGN KEY([ORDER_STATUS_ID])
REFERENCES [dbo].[ORDER_STATUS] ([ORDER_STATUS_ID])
GO

ALTER TABLE [dbo].[ORDER] CHECK CONSTRAINT [ORDER_ORDER_STATUS_FK]
GO

ALTER TABLE [dbo].[ORDER]  WITH CHECK ADD  CONSTRAINT [ORDER_VENDOR_SERVICES_FK] FOREIGN KEY([VENDOR_SERVICE_ID])
REFERENCES [dbo].[VENDOR_SERVICES] ([VENDOR_SERVICE_ID])
GO

ALTER TABLE [dbo].[ORDER] CHECK CONSTRAINT [ORDER_VENDOR_SERVICES_FK]
GO

CREATE TABLE [dbo].[VENDOR_RATING](
	[VENDOR_RATING_ID] Binary(16) NOT NULL,
	[SERVICE_QUALITY] decimal(18, 2) NOT NULL,
	[PUNCTUALITY] decimal(18, 2) NOT NULL,
	[COURTESY] decimal(18, 2) NOT NULL,
	[PRICE] decimal(18, 2) NOT NULL,
	[REVIEW_DATE] datetime NOT NULL,
	[COMMENTS] VARCHAR(MAX) NULL,
	[ORDER_ID] VARCHAR(50) NOT NULL,
	[VENDOR_ID] Binary(16) NOT NULL,
	[CUSTOMER_ID] Binary(16) NOT NULL
    CONSTRAINT [VENDOR_RATING_PK] PRIMARY KEY CLUSTERED(VENDOR_RATING_ID))
GO

/****** Object:  ForeignKey [VENDOR_RATING_ORDER_FK]    Script Date: 05/12/2016 08:57:10 ******/
ALTER TABLE [dbo].[VENDOR_RATING]  WITH CHECK ADD  CONSTRAINT [VENDOR_RATING_ORDER_FK] FOREIGN KEY([ORDER_ID])
REFERENCES [dbo].[ORDER] ([ORDER_ID])
GO
ALTER TABLE [dbo].[VENDOR_RATING] CHECK CONSTRAINT [VENDOR_RATING_ORDER_FK]
GO

CREATE TABLE [dbo].[CUSTOMER_RATING](
	[CUSTOMER_RATING_ID] Binary(16) NOT NULL,
	[ORDER_ID] VARCHAR(50) NOT NULL,
	[RATING] decimal(18, 2) NOT NULL,
	[COMMENTS] VARCHAR(MAX) NULL,
 CONSTRAINT [CUSTOMER_RATING_PK] PRIMARY KEY CLUSTERED(CUSTOMER_RATING_ID))

GO

/****** Object:  ForeignKey [CUSTOMER_RATING_ORDER_FK]    Script Date: 05/12/2016 08:57:10 ******/
ALTER TABLE [dbo].[CUSTOMER_RATING]  WITH CHECK ADD  CONSTRAINT [CUSTOMER_RATING_ORDER_FK] FOREIGN KEY([ORDER_ID])
REFERENCES [dbo].[ORDER] ([ORDER_ID])
GO
ALTER TABLE [dbo].[CUSTOMER_RATING] CHECK CONSTRAINT [CUSTOMER_RATING_ORDER_FK]
GO

CREATE TABLE [dbo].[CUSTOMER_ADDRESS](
	[ID] [binary](16) NOT NULL,
	[CUSTOMER_ID] [binary](16) NOT NULL,
	[ADDRESS_ID] [binary](16) NOT NULL,
 CONSTRAINT [PK_CUSTOMER_ADDRESS] PRIMARY KEY CLUSTERED([ID] ASC))

GO
/*********** Functions **************************/
CREATE FUNCTION [dbo].[GenerateComplaintID]()
RETURNS VARCHAR(MAX) 
AS 
-- Returns the New Complaint ID
BEGIN
    DECLARE @COMPLAINT_ID VARCHAR(MAX);
    DECLARE @START_INDEX_COMPLAINT_ID int;
    SET @START_INDEX_COMPLAINT_ID = 1000;
    DECLARE @COMPLAINT_COUNT int;
    
    SELECT @COMPLAINT_COUNT = Count(*) FROM dbo.COMPLAINT
    
    IF(@COMPLAINT_COUNT > 0)
      BEGIN
         SET @COMPLAINT_ID = 'Complaint#' + CONVERT(varchar, @START_INDEX_COMPLAINT_ID + @COMPLAINT_COUNT)
      END
    ELSE 
      BEGIN
         SET @COMPLAINT_ID = 'Complaint#' + CONVERT(varchar, @START_INDEX_COMPLAINT_ID)
      END 
      
    RETURN @COMPLAINT_ID;
END;
GO

CREATE FUNCTION dbo.GenerateOrderID()
RETURNS VARCHAR(MAX) 
AS 
-- Returns the New Order ID
BEGIN
    DECLARE @ORDER_ID VARCHAR(MAX);
    DECLARE @START_INDEX_ORDER_ID int;
    SET @START_INDEX_ORDER_ID = 1000;
    DECLARE @ORDER_COUNT int;
    
    SELECT @ORDER_COUNT = Count(*) FROM dbo.[ORDER]
    
    IF(@ORDER_COUNT > 0)
      BEGIN
         SET @ORDER_ID = 'TASKO' + CONVERT(varchar, @START_INDEX_ORDER_ID + @ORDER_COUNT)
      END
    ELSE 
      BEGIN
         SET @ORDER_ID = 'TASKO' + CONVERT(varchar, @START_INDEX_ORDER_ID)
      END 
      
    RETURN @ORDER_ID;
END;

GO
CREATE FUNCTION [dbo].[GetVendorTotalRating](
@pVendorId Binary(16)
)
RETURNS DECIMAL 
AS 
-- Returns the New Order ID
BEGIN
   DECLARE @OVERALL_RATING DECIMAL;
        
SELECT @OVERALL_RATING = ROUND(((SUM(SERVICE_QUALITY)+ SUM(PUNCTUALITY)+SUM(COURTESY)+SUM(PRICE))/count(*))/4,0)
  FROM VENDOR_RATING   
  WHERE VENDOR_ID = @pVENDORID
      
    RETURN @OVERALL_RATING;
END;

GO

CREATE TABLE [dbo].[CUSTOMER_FAVORITE_VENDOR](
	[FAVORITE_ID] [binary](16) NOT NULL,
	[VENDOR_ID] [binary](16) NOT NULL,
	[CUSTOMER_ID] [binary](16) NOT NULL,
 CONSTRAINT [PK_Customer_Favorite_Vendor] PRIMARY KEY CLUSTERED 
(
	[FAVORITE_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

CREATE TABLE [dbo].[OTP_DETAILS](
	[PHONE_NUMBER] [nvarchar](50) NOT NULL,
	[EMAIL_ID] [nvarchar](50) NULL,
	[OTP] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_OTP_DETAILS] PRIMARY KEY CLUSTERED 
(
	[PHONE_NUMBER] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

ALTER TABLE [dbo].[CUSTOMER_FAVORITE_VENDOR]  WITH CHECK ADD  CONSTRAINT [FK_Customer_Favorite_Vendor_CUSTOMER] FOREIGN KEY([CUSTOMER_ID])
REFERENCES [dbo].[CUSTOMER] ([CUSTOMER_ID])
GO

ALTER TABLE [dbo].[CUSTOMER_FAVORITE_VENDOR] CHECK CONSTRAINT [FK_Customer_Favorite_Vendor_CUSTOMER]
GO

ALTER TABLE [dbo].[CUSTOMER_FAVORITE_VENDOR]  WITH CHECK ADD  CONSTRAINT [FK_Customer_Favorite_Vendor_VENDOR] FOREIGN KEY([VENDOR_ID])
REFERENCES [dbo].[VENDOR] ([VENDOR_ID])
GO

ALTER TABLE [dbo].[CUSTOMER_FAVORITE_VENDOR] CHECK CONSTRAINT [FK_Customer_Favorite_Vendor_VENDOR]
GO

CREATE TABLE [dbo].[COMPLAINT](
	[Complaint_Id] [varchar](50) NOT NULL,
	[Title] [varchar](max) NOT NULL,
	[Assigned_To] [binary](16) NULL,
	[Logged_On_Date] [datetime] NOT NULL,
	[Due_Date] [datetime] NULL,
	[Complaint_Status] [int] NOT NULL,
	[Order_Id] [varchar](50) NULL,
 CONSTRAINT [PK_Complaint] PRIMARY KEY CLUSTERED 
(
	[Complaint_Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

ALTER TABLE [dbo].[COMPLAINT] ADD  CONSTRAINT [DF_Complaint_Complaint_Id]  DEFAULT ((1000)) FOR [Complaint_Id]
GO

ALTER TABLE [dbo].[COMPLAINT]  WITH CHECK ADD  CONSTRAINT [FK_COMPLAINT_ORDER] FOREIGN KEY([Order_Id])
REFERENCES [dbo].[ORDER] ([ORDER_ID])
GO

ALTER TABLE [dbo].[COMPLAINT] CHECK CONSTRAINT [FK_COMPLAINT_ORDER]
GO

SET ANSI_PADDING OFF
GO

CREATE TABLE [dbo].[COMPLAINTCHAT](
	[ComplaintChatId] [binary](16) NOT NULL,
	[ComplaintId] [varchar](50) NOT NULL,
	[ChatMessage] [varchar](max) NULL,
	[ChatDate] [datetime] NULL,
 CONSTRAINT [PK_ComplaintChat] PRIMARY KEY CLUSTERED 
(
	[ComplaintChatId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

ALTER TABLE [dbo].[COMPLAINTCHAT]  WITH CHECK ADD  CONSTRAINT [FK_ComplaintChat_COMPLAINT] FOREIGN KEY([ComplaintId])
REFERENCES [dbo].[COMPLAINT] ([Complaint_Id])
GO

ALTER TABLE [dbo].[COMPLAINTCHAT] CHECK CONSTRAINT [FK_ComplaintChat_COMPLAINT]
GO

CREATE TABLE [dbo].[ACTIVITY](
	[ACTIVITY_ID] [binary](16) NOT NULL,
	[ACTIVITY_TYPE] [nvarchar](max) NOT NULL,
	[CUSTOMER_ID] [binary](16) NULL,
	[VENDOR_ID] [binary](16) NULL,
	[ORDER_ID] [nvarchar](50) NULL,
	[COMMENTS] [nvarchar](max) NULL,
	[ACTIVITY_DATE] dateTime NOT NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

CREATE TABLE [dbo].[PAYMENTS](
	[PAYMENT_ID] [varchar](50) NOT NULL,
	[VENDOR_ID] [binary](16) NOT NULL,
	[DUE_DATE] [date] NOT NULL,
	[PAID_DATE] [date] NOT NULL,
	[AMOUNT] [decimal](18, 0) NOT NULL,
	[STATUS] [nvarchar](50) NOT NULL,
	[DESCRIPTION] [nvarchar](max) NULL,
	[MONTH] [nvarchar](50) NULL,
 CONSTRAINT [PK_PAYMENTS] PRIMARY KEY CLUSTERED 
(
	[PAYMENT_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO


CREATE TABLE [dbo].[USER](
	[USER_ID] [binary](16) NOT NULL,
	[USER_NAME] [varchar](50) NOT NULL,
	[NAME] [varchar](50) NOT NULL,
	[PASSWORD] [varchar](50) NOT NULL,
	[EMAIL_ADDRESS] [varchar](50) NOT NULL,
	[MOBILE_NUMBER] [varchar](50) NOT NULL,
	[ISADMIN] [bit] NOT NULL,
	[JOINED_DATE] [datetime] NOT NULL,
	[ISACTIVE] [bit] NOT NULL,
 CONSTRAINT [USER_PK] PRIMARY KEY CLUSTERED 
(
	[USER_ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_USER] UNIQUE NONCLUSTERED 
(
	[USER_NAME] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

CREATE TABLE [dbo].[GCM_USERS](
	[GCMID] [binary](16) NOT NULL,
	[GCMREGID] [varchar](max) NOT NULL,
	[NAME] [varchar](max) NOT NULL,
	[EMAILADDRESS] [varchar](max) NOT NULL,
	[CREATEDDATE] [datetime] NOT NULL,
 CONSTRAINT [PK_GCM_USERS] PRIMARY KEY CLUSTERED 
(
	[GCMID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]

GO

SET ANSI_PADDING OFF
GO

/*********** Stored Procedures **************************/
GO
CREATE PROCEDURE [dbo].[usp_GetVendorDetails]
(
	@pVendorId Binary(16)
)
AS
BEGIN

SET NOCOUNT ON;
SELECT VD.VENDOR_ID
      ,VD.USER_NAME
      ,VD.NAME
      ,VD.MOBILE_NUMBER
      ,VD.EMAIL_ADDRESS
      ,AD.Address AS VENDOR_ADDRESS
	  ,AD.COUNTRY AS VENDOR_COUNTRY
	  ,AD.CITY AS VENDOR_CITY
	  ,AD.CITY AS VENDOR_STATE
	  ,AD.LATITIUDE AS VENDOR_LATTITUDE
	  ,AD.LOCALITY AS VENDOR_LOCALITY
	  ,AD.LONGITUDE AS VENDOR_LONGITUDE
	  ,AD.PINCODE AS VENDOR_PINCODE
      ,VD.PHOTO
      ,VD.EMPLOYEE_COUNT
      ,VD.BASE_RATE
      ,VD.IS_VENDOR_VERIFIED
      ,VD.IS_VENDOR_LIVE
      ,VD.TIME_SPENT_ON_APP
      ,VD.ACTIVE_TIME_PER_DAY
      ,VD.DATA_CONSUMPTION
      ,VD.CALLS_TO_CUSTOMER_CARE
	  ,VD.DATE_OF_BIRTH
	  ,VD.GENDER
	  ,VD.REGISTERED_DATE
	  ,VD.VENDOR_REF_ID
FROM [dbo].[VENDOR] VD (NOLOCK)
INNER JOIN ADDRESS AD ON VD.ADDRESS_ID = AD.Address_ID
WHERE VENDOR_ID = @pVendorId 

END

GO


CREATE PROCEDURE [dbo].[usp_GetOrderDetails]
(
	@pOrderId Varchar(50)
)
AS
BEGIN

SET NOCOUNT ON;

SELECT ORD.ORDER_ID, Cust.CUSTOMER_ID, CUST.NAME AS CUSTOMER_NAME, VS.VENDOR_SERVICE_ID, VEN.VENDOR_ID ,VEN.NAME AS VENDOR_NAME, 
  SVCS.SERVICE_ID AS SERVICE_ID,SVCS.NAME AS SERVICE_NAME , OS.ORDER_STATUS_ID, OS.NAME AS ORDERSTATUS_NAME,
  ORD.REQUESTED_DATE ,ORD.ORDER_LOCATION ,ORD.SOURCE_ADDRESS_ID, ORD.DESTINATION_ADDRESS_ID,ORD.COMMENTS
  FROM dbo.[ORDER] ORD
  INNER JOIN CUSTOMER CUST ON ORD.CUSTOMER_ID = CUST.CUSTOMER_ID
  INNER JOIN VENDOR_SERVICES VS ON ORD.VENDOR_SERVICE_ID = VS.VENDOR_SERVICE_ID
  INNER JOIN VENDOR VEN ON VS.VENDOR_ID= VEN.VENDOR_ID
  INNER JOIN dbo.[SERVICES] SVCS ON VS.SERVICE_ID = SVCS.SERVICE_ID 
  INNER JOIN ORDER_STATUS OS ON ORD.ORDER_STATUS_ID = OS.ORDER_STATUS_ID   
WHERE ORDER_ID = @pOrderId 

---- Source Address
 SELECT [Address_ID],[COUNTRY],[STATE],[LATITIUDE] ,[LONGITUDE] ,[LOCALITY],[CITY],[ADDRESS],[PINCODE]
 FROM dbo.[ADDRESS] Addr
 INNER JOIN dbo.[ORDER] ORD ON ORD.[SOURCE_ADDRESS_ID] = Addr.[Address_ID]
 WHERE ORDER_ID = @pOrderId 

 ---- Destination Address
 SELECT [Address_ID],[COUNTRY],[STATE],[LATITIUDE] ,[LONGITUDE] ,[LOCALITY],[CITY],[ADDRESS],[PINCODE]
 FROM dbo.[ADDRESS] Addr
 INNER JOIN dbo.[ORDER] ORD ON ORD.[DESTINATION_ADDRESS_ID] = Addr.[Address_ID]
 WHERE ORDER_ID = @pOrderId 
END
GO
CREATE PROCEDURE [dbo].[usp_GetVendorServices]
(
	@pVendorId Binary(16)
)
AS
BEGIN

SET NOCOUNT ON;

SELECT VS.VENDOR_SERVICE_ID, SVCS.NAME AS SERVICE_NAME, IS_VENDOR_SERVICE_ACTIVE, SVCS.IMAGE_URL
  FROM VENDOR_SERVICES VS 
  INNER JOIN dbo.[SERVICES] SVCS ON VS.SERVICE_ID = SVCS.SERVICE_ID   
WHERE VENDOR_ID = @pVendorId AND SVCS.PARENT_SERVICE_ID IS NULL

END

GO
CREATE PROCEDURE [dbo].[usp_GetVendorSubServices]
(
	@pVendorServiceId Binary(16)
)
AS
BEGIN

SET NOCOUNT ON;

SELECT VS.VENDOR_SERVICE_ID, SVCS.NAME AS SERVICE_NAME, IS_VENDOR_SERVICE_ACTIVE, SVCS.IMAGE_URL
  FROM VENDOR_SERVICES VS 
  INNER JOIN dbo.[SERVICES] SVCS ON VS.SERVICE_ID = SVCS.SERVICE_ID   
WHERE VS.SERVICE_ID IN(SELECT SERVICE_ID FROM SERVICES 
WHERE PARENT_SERVICE_ID = (SELECT SERVICE_ID FROM VENDOR_SERVICES WHERE VENDOR_SERVICE_ID = @pVendorServiceId))

END

GO

CREATE PROCEDURE [dbo].[usp_AddActivity]
(
  @pActivityType nvarchar(max),
  @pCustomerId binary(16),
  @pVendorId binary(16),
  @pOrderId nvarchar(max),
  @pComment nvarchar(max)
)

AS
BEGIN

SET NOCOUNT ON;

INSERT INTO ACTIVITY VALUES (NEWID(), @pActivityType, @pCustomerId, @pVendorId, @pOrderId, @pComment, GetDate())

END

GO

CREATE PROCEDURE [dbo].[usp_GetDashboardRecentActivities]
AS
BEGIN

SET NOCOUNT ON;

SELECT TOP 20 ACTIVITY_ID, ACTIVITY_TYPE, CUSTOMER_ID, VENDOR_ID, ORDER_ID, COMMENTS, ACTIVITY_DATE FROM dbo.ACTIVITY AC
ORDER BY ACTIVITY_DATE DESC

END
GO

CREATE PROCEDURE [dbo].[usp_UpdateOrderStatus]
(
	@pOrderId varchar(50),
	@pOrderStatus int,
	@pComments nvarchar(max)
)
AS
BEGIN

DECLARE @err_message nvarchar(255)
SET NOCOUNT ON;

IF EXISTS (Select NAME from ORDER_STATUS WHERE ORDER_STATUS_ID = @pOrderStatus)
  BEGIN
        UPDATE [dbo].[ORDER]  SET ORDER_STATUS_ID = @pOrderStatus,COMMENTS =@pComments WHERE ORDER_ID = @pOrderId

		IF (@pOrderStatus = 6)
		BEGIN
			DECLARE @pComment nvarchar(max)
			SET @pComment = CONCAT(@pOrderId,' Order ', ' is completed.')
			EXEC [dbo].[usp_AddActivity] 'ORDER', null, null, @pOrderId, @pComment
		END
  END
ELSE
BEGIN
	SET @err_message = 'Invalid Order status'
         RAISERROR (@err_message,10, 1) 	
	END

END

GO

CREATE FUNCTION [dbo].[CheckIsParentServiceId](
@pVendorServiceId Binary(16)
)
RETURNS bit 
AS 
-- Returns the New Order ID
BEGIN
    DECLARE @SERVICE_ID Binary(16); 
	DECLARE @ISPARENTSERVICE bit;   
	SELECT @SERVICE_ID = SERVICE_ID FROM VENDOR_SERVICES WHERE VENDOR_SERVICE_ID = @pVendorServiceId
	IF EXISTS(SELECT SERVICE_ID FROM dbo.[SERVICES] WHERE PARENT_SERVICE_ID = @SERVICE_ID)
	    BEGIN
		    -- The given vendor service id is a parent service.
	      SET @ISPARENTSERVICE = 1;
	    END
	ELSE
	    BEGIN
		  -- The given vendor service id is a Sub service.
	      SET @ISPARENTSERVICE = 0;
	    END

 RETURN @ISPARENTSERVICE;
END;

GO

CREATE PROCEDURE [dbo].[usp_UpdateBaseRate]
(
	@pVendorId Binary(16),
	@pBaseRate decimal
)
AS
BEGIN

SET NOCOUNT ON;
  UPDATE [dbo].[VENDOR] SET BASE_RATE = @pBaseRate WHERE VENDOR_ID = @pVendorId
END

GO
CREATE PROCEDURE [dbo].[usp_GetVendorOrders]
(
      @pVENDORID BINARY(16) = NULL,
      @pORDERSTATUSID INT,
	  @pPAGENO INT,
	  @pRECORDSPERPAGE INT
)
AS
BEGIN

SET NOCOUNT ON;

DECLARE @VSQL NVARCHAR(MAX)
    
IF @pVENDORID IS NOT NULL   
SET @VSQL= 'SELECT ORD.ORDER_ID, ORD.REQUESTED_DATE, SVCS.NAME AS SERVICENAME, OS.NAME AS ORDERSTATUSNAME, ORD.COMMENTS
  FROM dbo.[ORDER] ORD
  INNER JOIN VENDOR_SERVICES VS ON ORD.VENDOR_SERVICE_ID = VS.VENDOR_SERVICE_ID
  INNER JOIN dbo.[SERVICES] SVCS ON VS.SERVICE_ID = SVCS.SERVICE_ID 
  INNER JOIN ORDER_STATUS OS ON ORD.ORDER_STATUS_ID = OS.ORDER_STATUS_ID  
  WHERE VS.VENDOR_ID = @VVENDORID '
  ELSE
  SET @VSQL= 'SELECT ORD.ORDER_ID, ORD.REQUESTED_DATE, SVCS.NAME AS SERVICENAME, OS.NAME AS ORDERSTATUSNAME, VD.NAME AS VENDOR_NAME, CUST.NAME AS CUSTOMER_NAME
  FROM dbo.[ORDER] ORD
  INNER JOIN VENDOR_SERVICES VS ON ORD.VENDOR_SERVICE_ID = VS.VENDOR_SERVICE_ID
  INNER JOIN dbo.[SERVICES] SVCS ON VS.SERVICE_ID = SVCS.SERVICE_ID 
  INNER JOIN ORDER_STATUS OS ON ORD.ORDER_STATUS_ID = OS.ORDER_STATUS_ID
  INNER JOIN VENDOR VD ON VD.VENDOR_ID = VS.VENDOR_ID
  INNER JOIN CUSTOMER CUST ON CUST.CUSTOMER_ID= ORD.CUSTOMER_ID'

IF(@PORDERSTATUSID<>0)
      SET @VSQL = @VSQL + ' AND ORD.ORDER_STATUS_ID = @vORDERSTATUSID '

IF(@pPAGENO<>0)
	  SET @VSQL = @VSQL +' ORDER BY ORD.ORDER_ID DESC OFFSET (@vPAGENO-1)*@vRECORDSPERPAGE ROWS FETCH NEXT @vRECORDSPERPAGE ROWS ONLY'
      
EXEC SP_EXECUTESQL @VSQL,N'@vVENDORID BINARY(16),@vORDERSTATUSID INT, @vPAGENO INT, @vRECORDSPERPAGE INT', @pVENDORID, @pORDERSTATUSID, @pPAGENO, @pRECORDSPERPAGE

END


GO

CREATE PROCEDURE [dbo].[usp_GetVendorOverallRating]
(
    @pVENDORID BINARY(16)
)
AS
BEGIN

SET NOCOUNT ON;

SELECT ROUND(SUM(VR.SERVICE_QUALITY)/count(*),0) AS QUALITY,ROUND(SUM(VR.PUNCTUALITY)/count(*),0) AS PUNCTUALITY, ROUND(SUM(VR.COURTESY)/count(*),0) AS COURTESY, ROUND(SUM(VR.PRICE)/count(*),0) AS PRICE, ROUND(((SUM(VR.SERVICE_QUALITY)+ SUM(VR.PUNCTUALITY)+SUM(VR.COURTESY)+SUM(VR.PRICE))/count(*))/4,0) AS TOTAL
  FROM VENDOR_RATING VR  
  WHERE VR.VENDOR_ID= @pVENDORID

END

GO

CREATE PROCEDURE [dbo].[usp_GetVendorRatings]
(
	@pVendorId Binary(16)
)
AS
BEGIN

SET NOCOUNT ON;

SELECT TOP 25 VR.VENDOR_RATING_ID, VR.SERVICE_QUALITY, VR.PUNCTUALITY, VR.COURTESY, VR.PRICE, VR.REVIEW_DATE, VR.COMMENTS, CUST.NAME,
  ROUND(SUM(VR.SERVICE_QUALITY + VR.PUNCTUALITY + VR.COURTESY + VR.PRICE)/4,0) AS TOTAL
  FROM VENDOR_RATING VR
  INNER JOIN CUSTOMER CUST ON VR.CUSTOMER_ID = CUST.CUSTOMER_ID
  WHERE VR.VENDOR_ID= @pVendorId 
  GROUP BY VR.VENDOR_RATING_ID, VR.SERVICE_QUALITY, VR.PUNCTUALITY, VR.COURTESY,VR.PRICE, VR.REVIEW_DATE, VR.COMMENTS, CUST.NAME
  ORDER BY REVIEW_DATE DESC
END

GO

CREATE PROCEDURE [dbo].[usp_LOGIN]
(
	@pUserName Varchar(max),
	@pPassword nvarchar(10),
	@pMobileNumber varchar(50),
	@pUserType smallint

)
AS
BEGIN

SET NOCOUNT ON;
declare @AuthCode binary(16)

declare @UserID binary(16)
set @authCode = NEWID()
 if (@pUserType = 1)
 BEGIN
 IF @pUserName IS NOT NULL AND LEN(@pUserName) > 0 --username is passed
	BEGIN
		select @UserID= VENDOR_ID from vendor where [USER_NAME] = @pUserName and PASSWORD = @pPassword
	END
 ELSE IF @pMobileNumber IS NOT NULL AND LEN(@pPassword) >0 
	BEGIN
		select @UserID= VENDOR_ID from vendor where MOBILE_NUMBER = @pMobileNumber and PASSWORD = @pPassword
	END
End 

if(@UserID is not null)
BEGIN
	insert into loggedon_user values(@UserID, @AuthCode)
END
SELECT @AuthCode as AUTH_CODE, @UserID as USERID
END

GO

CREATE PROCEDURE [dbo].[usp_Logout]
(
	@pUserId binary(16),
	@pTokenCode binary(16)
)
AS
BEGIN


SET NOCOUNT ON;

delete from Loggedon_user where user_id = @pUserId and AUTH_code = @pTokenCode
END



GO

CREATE PROCEDURE [dbo].[usp_InsertAuthCode]

AS
BEGIN

SET NOCOUNT ON;
declare @authcode binary(16)
set @authcode = newid()
Insert into auth_code values(@authcode) 
select @authcode as Auth_Code
END

GO
CREATE PROCEDURE [dbo].[usp_ValidateAuthCode]
(
@pAuthCode binary(16),
@pIsDeleteRequired bit
)
AS
BEGIN

SET NOCOUNT ON;
declare @count int
declare @isvalid bit
select @count = count(1) from Auth_Code where code = @pAuthCode
if(@count >0)
BEGIN
if(@pIsDeleteRequired = 1)
BEGIN
delete from Auth_Code where code = @pAuthCode
END
set @isvalid = 1
END
Else
begin 
	set @isvalid =0
end

select @isvalid as IsValid
End

GO

CREATE PROCEDURE [dbo].[usp_ValidateTokenCode]
(
@pTokenCode binary(16),
@pUserId binary(16)
)
AS
BEGIN

SET NOCOUNT ON;
declare @count int
declare @isvalid bit
select @count = count(1) from LOGGEDON_USER where USER_ID = @pUserId and AUTH_CODE = @pTokenCode

if(@count >0)
BEGIN
set @isvalid = 1
END
Else
begin 
	set @isvalid =0
end

select @isvalid as IsValid
End
GO

CREATE PROCEDURE [dbo].[usp_GetServices]

AS
BEGIN

SET NOCOUNT ON;

SELECT [SERVICE_ID]
      ,[NAME]
      ,[PARENT_SERVICE_ID]
      ,[IMAGE_URL]
  FROM [dbo].[SERVICES]
  WHERE [PARENT_SERVICE_ID] IS NULL AND [STATUS]=0
END

GO
CREATE PROCEDURE [dbo].[usp_GetRecentOrder]
(
	@pCustomerId binary(16)
)
AS
BEGIN

SET NOCOUNT ON;

SELECT TOP 1 ORD.ORDER_ID, Cust.CUSTOMER_ID, CUST.NAME AS CUSTOMER_NAME, VS.VENDOR_SERVICE_ID, VEN.VENDOR_ID ,VEN.NAME AS VENDOR_NAME, 
  SVCS.SERVICE_ID AS SERVICE_ID,SVCS.NAME AS SERVICE_NAME , OS.ORDER_STATUS_ID, OS.NAME AS ORDERSTATUS_NAME,
  ORD.REQUESTED_DATE ,ORD.ORDER_LOCATION, ORD.SOURCE_ADDRESS_ID, ORD.DESTINATION_ADDRESS_ID,ORD.COMMENTS
  FROM dbo.[ORDER] ORD
  INNER JOIN CUSTOMER CUST ON ORD.CUSTOMER_ID = CUST.CUSTOMER_ID
  INNER JOIN VENDOR_SERVICES VS ON ORD.VENDOR_SERVICE_ID = VS.VENDOR_SERVICE_ID
  INNER JOIN VENDOR VEN ON VS.VENDOR_ID= VEN.VENDOR_ID
  INNER JOIN dbo.[SERVICES] SVCS ON VS.SERVICE_ID = SVCS.SERVICE_ID 
  INNER JOIN ORDER_STATUS OS ON ORD.ORDER_STATUS_ID = OS.ORDER_STATUS_ID   
WHERE ORD.CUSTOMER_ID = @pCustomerId ORDER BY ORD.REQUESTED_DATE DESC

---- Source Address
 SELECT TOP 1 Address_ID,COUNTRY,STATE,LATITIUDE ,LONGITUDE ,LOCALITY,CITY,ADDRESS,PINCODE
 FROM dbo.[ADDRESS] Addr
 INNER JOIN dbo.[ORDER] ORD ON ORD.[SOURCE_ADDRESS_ID] = Addr.[Address_ID]
 WHERE ORD.CUSTOMER_ID = @pCustomerId ORDER BY ORD.REQUESTED_DATE DESC

 ---- Destination Address
 SELECT TOP 1 Address_ID,COUNTRY,STATE,LATITIUDE ,LONGITUDE ,LOCALITY,CITY,ADDRESS,PINCODE
 FROM dbo.[ADDRESS] Addr
 INNER JOIN dbo.[ORDER] ORD ON ORD.[DESTINATION_ADDRESS_ID] = Addr.[Address_ID]
 WHERE ORD.CUSTOMER_ID = @pCustomerId ORDER BY ORD.REQUESTED_DATE DESC
END

GO

CREATE PROCEDURE [dbo].[usp_GetServiceVendors]
(
  @pServiceId binary(16),
  @pCustomerId binary(16)
)

AS
BEGIN

SET NOCOUNT ON;
	SELECT SVC.SERVICE_ID ,SVC.NAME AS SERVICE_NAME, V.VENDOR_ID, V.NAME AS VENDOR_NAME,VENDOR_SERVICE_ID, V.BASE_RATE, CV.FAVORITE_ID,
	(SELECT COUNT(*) FROM VENDOR_RATING VR WHERE VR.VENDOR_ID = V.VENDOR_ID)AS TOTAL_REVIEWS, dbo.[GetVendorTotalRating](V.VENDOR_ID) AS OVERALL_RATINGS
	FROM [dbo].[SERVICES] SVC
	INNER JOIN [dbo].[VENDOR_SERVICES] VS ON VS.SERVICE_ID = SVC.SERVICE_ID
	INNER JOIN [dbo].[VENDOR] V ON V.VENDOR_ID = VS.VENDOR_ID
	LEFT OUTER JOIN [dbo].[CUSTOMER_FAVORITE_VENDOR] CV ON CV.CUSTOMER_ID = @pCustomerId AND CV.VENDOR_ID = V.VENDOR_ID
	WHERE SVC.SERVICE_ID = @pServiceId AND VS.IS_VENDOR_SERVICE_ACTIVE = 1
END


GO

CREATE PROCEDURE [dbo].[usp_ConfirmOrder]
(
  @pVendorServiceId binary(16),
  @pCustomerId binary(16),
  @pSourceAddressId binary(16),
  @pDestinationAddressId binary(16)
)

AS
BEGIN

SET NOCOUNT ON;

  DECLARE @OrderId Varchar(50)
  SET  @OrderId = dbo.GenerateOrderID()

  INSERT INTO [dbo].[ORDER] VALUES(@OrderId,@pVendorServiceId,@pCustomerId,GetDate(),1,'',@pSourceAddressId,@pDestinationAddressId,null, null)

  IF EXISTS (Select ORDER_ID FROM dbo.[ORDER] WHERE ORDER_ID = @OrderId)
  BEGIN
     --- We should log the activity only when the above insert statement is success.
	  DECLARE @pComment nvarchar(max)
	  SET @pComment = CONCAT('New Order ', @OrderId, ' has been placed.')
	  EXEC [dbo].[usp_AddActivity] 'ORDER', null, null, @OrderId, @pComment
  END
  SELECT @OrderId as ORDER_ID
END

GO
CREATE PROCEDURE [dbo].[usp_AddCustomerAddress]
(
  @pCustomerId binary(16), 
  @pAddressId binary(16)
)

AS
BEGIN

SET NOCOUNT ON;

  INSERT INTO [dbo].CUSTOMER_ADDRESS VALUES(newid(),@pCustomerId,@pAddressId)
END

GO

CREATE PROCEDURE [dbo].[usp_UpdateCustomerAddress]
(
  @pAddressId binary(16),  
  @pCountry nvarchar(max),
  @pState nvarchar(max),
  @pLatitude nvarchar(max),
  @pLongitude nvarchar(max),
  @pLocality nvarchar(max),
  @pCity nvarchar(max),
  @pAddress nvarchar(max),
  @Pincode nvarchar(max)
)

AS
BEGIN

SET NOCOUNT ON;

  DECLARE @AddressId binary(16)
  SET  @AddressId = newId()

  UPDATE [dbo].[ADDRESS] SET COUNTRY = @pCountry, STATE= @pState, LATITIUDE = @pLatitude, 
                         LONGITUDE = @pLongitude,LOCALITY = @pLocality,CITY = @pCity,
                         [ADDRESS]=@pAddress,PINCODE = @Pincode
  WHERE Address_ID = @pAddressId

  SELECT @AddressId as ADDRESS_ID
END


GO

CREATE PROCEDURE [dbo].[usp_DeleteCustomerAddress]
(
  @pCustomerId binary(16),
  @pAddressId binary(16)
)

AS
BEGIN

SET NOCOUNT ON;
 
 DELETE dbo.CUSTOMER_ADDRESS WHERE CUSTOMER_ID = @pCustomerId AND ADDRESS_ID = @pAddressId
 
 DELETE dbo.[ADDRESS] WHERE ADDRESS_ID = @pAddressId
END

GO

CREATE PROCEDURE [dbo].[usp_GetCustomerAddresses]
(
  @pCustomerId binary(16)
)

AS
BEGIN

SET NOCOUNT ON;

 SELECT Addr.Address_ID,COUNTRY,STATE,LATITIUDE ,LONGITUDE ,LOCALITY,CITY,ADDRESS,PINCODE
 FROM dbo.[ADDRESS] Addr
 INNER JOIN dbo.CUSTOMER_ADDRESS CA ON CA.[ADDRESS_ID] = Addr.[Address_ID]
 WHERE CA.CUSTOMER_ID = @pCustomerId 
END

GO

CREATE PROCEDURE [dbo].[usp_AddAddress]
(
  @pCountry nvarchar(max),
  @pState nvarchar(max),
  @pLatitude nvarchar(max),
  @pLongitude nvarchar(max),
  @pLocality nvarchar(max),
  @pCity nvarchar(max),
  @pAddress nvarchar(max),
  @Pincode nvarchar(max)
)

AS
BEGIN

SET NOCOUNT ON;

  DECLARE @AddressId binary(16)
  SET  @AddressId = newId()

  INSERT INTO [dbo].[ADDRESS] VALUES(@AddressId,@pCountry,@pState,@pLatitude,@pLongitude,@pLocality,@pCity,@pAddress,@Pincode)

  SELECT @AddressId as ADDRESS_ID
END

GO

CREATE PROCEDURE [dbo].[usp_GetCustomerOrders]
(
      @pCustomerId binary(16),
	  @pOrderstatusId int,
	  @pPageNo int,
	  @pRecordsPerPage int
)
AS
BEGIN

SET NOCOUNT ON;

DECLARE @VSQL NVARCHAR(MAX)
            
SET @VSQL= 'SELECT ORD.ORDER_ID, OS.NAME AS ORDERSTATUS_NAME, SVCS.SERVICE_ID , SVCS.NAME AS SERVICE_NAME, ORD.REQUESTED_DATE, ORD.COMMENTS
  FROM dbo.[ORDER] ORD
  INNER JOIN VENDOR_SERVICES VS ON ORD.VENDOR_SERVICE_ID = VS.VENDOR_SERVICE_ID
  INNER JOIN dbo.[SERVICES] SVCS ON VS.SERVICE_ID = SVCS.SERVICE_ID 
  INNER JOIN ORDER_STATUS OS ON ORD.ORDER_STATUS_ID = OS.ORDER_STATUS_ID  
WHERE ORD.CUSTOMER_ID = @vCustomerId '

IF(@pOrderstatusId<>0)
      SET @VSQL = @VSQL + ' AND ORD.ORDER_STATUS_ID = @vOrderstatusId '

	  SET @VSQL = @VSQL +' ORDER BY ORD.ORDER_ID OFFSET (@vPAGENO-1)*@vrecordsperpage ROWS FETCH NEXT @vRECORDSPERPAGE ROWS ONLY'
      
EXEC SP_EXECUTESQL @VSQL,N'@vCustomerId binary(16),@vOrderstatusId int, @vPAGENO INT, @vRECORDSPERPAGE INT', @pCustomerId, @pOrderstatusId, @pPageNo, @pRecordsPerPage

END
GO

CREATE PROCEDURE [dbo].[usp_UpdateCustomer]
(
  @pCustomerId binary(16),
  @pName nvarchar(max),
  @pEmailAddress nvarchar(max),
  @pMobileNumber nvarchar(max)
)

AS
BEGIN

SET NOCOUNT ON;

  UPDATE [dbo].[CUSTOMER] SET NAME = @pName, EMAIL_ADDRESS = @pEmailAddress, MOBILE_NUMBER = @pMobileNumber
  WHERE CUSTOMER_ID = @pCustomerId 

END

GO
CREATE PROCEDURE [dbo].[usp_AddVendorRating]
(
  @pOrderId varchar(50),
  @pCustomerId binary(16),
  @pVendorId binary(16),
  @pServiceQuality decimal(18,2),
  @pPunctuality decimal(18,2),
  @pCourtesy decimal(18,2),
  @pPrice decimal(18,2),
  @pComments nvarchar(max)
)

AS
BEGIN

SET NOCOUNT ON;

  INSERT INTO [dbo].[VENDOR_RATING] VALUES(NewId(),@pServiceQuality,@pPunctuality,@pCourtesy,@pPrice,Getdate(),@pComments,@pOrderId,@pVendorId,@pCustomerId)

END

GO
CREATE PROCEDURE [dbo].[usp_ChangePassword]
(
	@pVendorId binary(16),
	@pPassword nvarchar(max),
	@pOldPassword nvarchar(max)
)
AS
BEGIN

DECLARE @IsOldPasswordCorrect bit
SET NOCOUNT ON;

IF EXISTS (SELECT VENDOR_ID from [dbo].[VENDOR] WHERE VENDOR_ID = @pVendorId AND PASSWORD = @pOldPassword)
  BEGIN
     UPDATE [dbo].[VENDOR]  SET PASSWORD = @pPassword WHERE VENDOR_ID = @pVendorId
	 SET @IsOldPasswordCorrect =1
  END
ELSE
BEGIN
  SET @IsOldPasswordCorrect = 0
  END
   
 SELECT @IsOldPasswordCorrect 
END
GO

CREATE PROCEDURE [dbo].[usp_SetFavoriteVendor]
(
  @pCustomerId binary(16), 
  @pVendorId binary(16)
)

AS
BEGIN

DECLARE @IsFavouriteVendorAlreadySet bit
SET NOCOUNT ON;
	IF EXISTS (SELECT VENDOR_ID from [dbo].CUSTOMER_FAVORITE_VENDOR WHERE VENDOR_ID = @pVendorId AND CUSTOMER_ID = @pCustomerId)
		BEGIN
			SET @IsFavouriteVendorAlreadySet =1
		END
	ELSE
	BEGIN
	  INSERT INTO [dbo].CUSTOMER_FAVORITE_VENDOR VALUES(newid(), @pVendorId, @pCustomerId)
	  SET @IsFavouriteVendorAlreadySet =0
	END	

	SELECT @IsFavouriteVendorAlreadySet
END

GO

CREATE PROCEDURE [dbo].[usp_GetFavoriteVendors]
(
  @pCustomerId binary(16)
)

AS
BEGIN

SET NOCOUNT ON;

SELECT V.VENDOR_ID, V.NAME AS VENDOR_NAME,
(SELECT COUNT(*) FROM VENDOR_RATING VR WHERE VR.VENDOR_ID = V.VENDOR_ID)AS TOTAL_RATINGS,
dbo.[GetVendorTotalRating](V.VENDOR_ID) AS OVERALL_RATINGS

	FROM [dbo].[CUSTOMER_FAVORITE_VENDOR] CFV
	INNER JOIN [dbo].[VENDOR] V ON V.VENDOR_ID = CFV.VENDOR_ID
	WHERE CFV.CUSTOMER_ID = @pCustomerId
END

GO


/****** Object:  StoredProcedure [dbo].[usp_UpdateVendor]    Script Date: 01-06-2016 00:36:20 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_UpdateVendor]
(
	@pVendorId binary(16),
	@pName nvarchar(max),
	@pMobileNumber nvarchar(max),  
	@pEmailAddress nvarchar(max),
	@pGender bit,
	@pDOB datetime
)

AS
BEGIN

SET NOCOUNT ON;

UPDATE [dbo].VENDOR SET NAME = COALESCE(@pName,NAME),
						MOBILE_NUMBER = COALESCE(@pMobileNumber,MOBILE_NUMBER),	
						DATE_OF_BIRTH = COALESCE(@pDOB,DATE_OF_BIRTH),	
						GENDER = COALESCE(@pGender, GENDER),
						EMAIL_ADDRESS = COALESCE(@pEmailAddress, EMAIL_ADDRESS)
WHERE VENDOR_ID = @pVendorId

END


GO



/****** Object:  StoredProcedure [dbo].[usp_InsertOTPDetails]    Script Date: 07-06-2016 02:09:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[usp_InsertOTPDetails]
@pOtp varchar(20),
@pPhoneNumber varchar(20),
@pEmailId varchar(100)
AS
BEGIN

	SET NOCOUNT ON;

	DECLARE @count smallint

	SELECT @count = count(1) FROM OTP_DETAILS WHERE PHONE_NUMBER = @pPhoneNumber

	IF(@count >0)
	BEGIN

	--update 
		UPDATE OTP_DETAILS SET OTP=@pOtp where PHONE_NUMBER = @pPhoneNumber
	END
	ELSE
	BEGIN

		INSERT INTO OTP_DETAILS (PHONE_NUMBER, EMAIL_ID, OTP) VALUES (@pPhoneNumber,@pEmailId, @pOtp)	
	END

END




GO

/****** Object:  StoredProcedure [dbo].[usp_ValidateOTP]    Script Date: 07-06-2016 02:10:04 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[usp_ValidateOTP]
(
@pPhoneNumber varchar(20),
@pOTP varchar(10)
)
AS
BEGIN

SET NOCOUNT ON;
declare @count int
declare @isvalid bit
select @count = count(1) from OTP_DETAILS where PHONE_NUMBER = @pPhoneNumber and OTP = @pOTP

if(@count >0)
BEGIN
set @isvalid = 1
DELETE FROM OTP_DETAILS where PHONE_NUMBER = @pPhoneNumber and OTP = @pOTP
END
Else
begin 
	set @isvalid =0
end

select @isvalid as IsValid
End

GO


/****** Object:  StoredProcedure [dbo].[usp_AddCustomer]    Script Date: 07-06-2016 02:11:01 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[usp_AddCustomer]
(
  @pName nvarchar(max),
  @pEmailId nvarchar(max),
  @pPhoneNumber nvarchar(max)
)

AS
BEGIN

SET NOCOUNT ON;
DECLARE @customerId Binary(16)
DECLARE @authCode Binary(16)
declare @count int
SELECT @count= count(1) FROM CUSTOMER WHERE MOBILE_NUMBER = @pPhoneNumber
if (@count =0)
BEGIN
	SET @customerId = NEWID()
	SET @authCode = NEWID()

	   INSERT INTO CUSTOMER (CUSTOMER_ID, NAME, EMAIL_ADDRESS, MOBILE_NUMBER) VALUES (@customerId, @pName, @pEmailId, @pPhoneNumber)
	   INSERT INTO LOGGEDON_USER VALUES(@customerId, @authCode)

		IF EXISTS (Select CUSTOMER_ID FROM dbo.CUSTOMER WHERE CUSTOMER_ID = @customerId)
		  BEGIN   
			DECLARE @pComment nvarchar(max)
			SET @pComment = CONCAT('Customer ', @pName, ' registered.')
			EXEC [dbo].[usp_AddActivity] 'CUSTOMER', @customerId, null, null, @pComment
		  END
END
   SELECT @customerId as USERID, @authCode as AUTH_CODE

END

GO

CREATE PROCEDURE [dbo].[usp_CustomerLoginValidateOTP]
(
@pPhoneNumber varchar(20),
@pOTP varchar(10)
)
AS
BEGIN

	SET NOCOUNT ON;
	declare @count int
	declare @isvalid bit
	declare @customerId binary(16)
	declare @authCode binary(16)
	set @authCode = NEWID()
	select @count = count(1) from OTP_DETAILS where PHONE_NUMBER = @pPhoneNumber and OTP = @pOTP

	if(@count >0)
	BEGIN
		set @isvalid = 1
		select @customerId =  CUSTOMER_ID from CUSTOMER where MOBILE_NUMBER = @pPhoneNumber
		DELETE FROM OTP_DETAILS where PHONE_NUMBER = @pPhoneNumber and OTP = @pOTP
		insert into loggedon_user values(@customerId, @authCode)
	END
	Else
	BEGIN 
		set @isvalid =0
	END

	SELECT @isvalid as IsValid , @customerId as USERID, @authCode as AUTH_CODE
End

GO

CREATE PROCEDURE [dbo].usp_GetCustomerDetails
(
	@pCustomerId Binary(16)
)
AS
BEGIN

SET NOCOUNT ON;

SELECT [CUSTOMER_ID]
      ,[NAME]
      ,[MOBILE_NUMBER]
      ,[EMAIL_ADDRESS]
FROM [dbo].[CUSTOMER] (NOLOCK)
WHERE CUSTOMER_ID = @pCustomerId 

END

GO
CREATE PROCEDURE [dbo].[usp_DeleteFavoriteVendor]
(
  @pCustomerId binary(16), 
  @pVendorId binary(16)
)

AS
BEGIN

SET NOCOUNT ON;

  DELETE FROM [dbo].CUSTOMER_FAVORITE_VENDOR WHERE VENDOR_ID = @pVendorId AND CUSTOMER_ID = @pCustomerId
END
GO

CREATE PROCEDURE [dbo].[usp_AddService]
(
  @pName nvarchar(max),
  @pImageUrl nvarchar(max),
  @pParentServiceId Binary(16),
  @pStatus int
)

AS
BEGIN

SET NOCOUNT ON;
DECLARE @IsServiceAlreadyExist bit

IF NOT EXISTS (SELECT NAME from [dbo].[SERVICES] WHERE NAME = @pName)
 BEGIN
   INSERT INTO [dbo].[SERVICES] VALUES (NEWID(), @pName, @pParentServiceId, @pImageUrl, @pStatus)
   SET @IsServiceAlreadyExist =0
 END
 ELSE
 BEGIN
   SET @IsServiceAlreadyExist =1
 END

 SELECT @IsServiceAlreadyExist
END

GO
CREATE PROCEDURE [dbo].[usp_UpdateService]
(
  @pServiceId Binary(16),
  @pName nvarchar(max),
  @pImageUrl nvarchar(max),
  @pStatus int
)

AS
BEGIN

SET NOCOUNT ON;
   UPDATE [dbo].[SERVICES] SET NAME = @pName, IMAGE_URL = @pImageUrl, [Status]=@pStatus WHERE SERVICE_ID =@pServiceId
END

GO
CREATE PROCEDURE [dbo].[usp_DisableService]
(
  @pServiceId Binary(16),
  @pStatus int
)

AS
BEGIN

SET NOCOUNT ON;
   UPDATE [dbo].[SERVICES] SET [Status]=@pStatus WHERE SERVICE_ID =@pServiceId
END

GO
CREATE PROCEDURE [dbo].[usp_DeleteService]
(  
  @pServiceId Binary(16)
)

AS
BEGIN

SET NOCOUNT ON;
DECLARE @IsServiceInUse bit

IF NOT EXISTS (SELECT SERVICE_ID from [dbo].[VENDOR_SERVICES] WHERE SERVICE_ID = @pServiceId)
 BEGIN
   DELETE [dbo].[SERVICES] WHERE SERVICE_ID = @pServiceId
   SET @IsServiceInUse =0
 END
 ELSE
 BEGIN
   SET @IsServiceInUse =1
 END

 SELECT @IsServiceInUse
END

GO
CREATE PROCEDURE [dbo].[usp_GetALLServices]

AS
BEGIN

SET NOCOUNT ON;

SELECT SV.[SERVICE_ID]
      ,[NAME]
      ,[PARENT_SERVICE_ID]
      ,[IMAGE_URL]
	  ,[STATUS]
	  ,COUNT(VS.SERVICE_ID) AS TOTAL_VENDORS
	  ,(SELECT COUNT(ORD.ORDER_ID) FROM [dbo].[ORDER] ORD
	    INNER JOIN [dbo].[VENDOR_SERVICES] VS ON ORD.VENDOR_SERVICE_ID = VS.VENDOR_SERVICE_ID WHERE VS.SERVICE_ID = SV.[SERVICE_ID] ) AS TOTAL_ORDERS
  FROM [dbo].[SERVICES] SV
  LEFT OUTER JOIN [dbo].[VENDOR_SERVICES] VS ON SV.SERVICE_ID = VS.SERVICE_ID
  GROUP BY SV.SERVICE_ID,NAME,IMAGE_URL,PARENT_SERVICE_ID,[STATUS]
END

GO
CREATE PROCEDURE [dbo].[usp_GetOrdersByService]
(  
  @pServiceId Binary(16)
)

AS
BEGIN

SET NOCOUNT ON;

SELECT [ORDER_ID],[REQUESTED_DATE], OS.[NAME] AS ORDER_STATUS_NAME, CUST.[NAME] AS CUSTOMER_NAME, SVS.[NAME] AS [SERVICE_NAME], V.[NAME] AS VENDOR_NAME
   FROM [dbo].[ORDER] ORD
   INNER JOIN [dbo].[ORDER_STATUS] OS ON OS.ORDER_STATUS_ID = ORD.ORDER_STATUS_ID
   INNER JOIN [dbo].[CUSTOMER] CUST ON CUST.CUSTOMER_ID = ORD.CUSTOMER_ID
   INNER JOIN [dbo].[VENDOR_SERVICES] VS ON ORD.VENDOR_SERVICE_ID = VS.VENDOR_SERVICE_ID
   INNER JOIN [dbo].[SERVICES] SVS ON SVS.SERVICE_ID = VS.SERVICE_ID
   INNER JOIN [dbo].[VENDOR] V ON V.VENDOR_ID = VS.VENDOR_ID

   WHERE VS.SERVICE_ID = @pServiceId
END

GO
CREATE PROCEDURE [dbo].[usp_GetVendorsByService]
(  
  @pServiceId Binary(16)
)

AS
BEGIN

SET NOCOUNT ON;

SELECT V.[VENDOR_ID],[NAME],[USER_NAME],[MOBILE_NUMBER],[EMAIL_ADDRESS],[IS_VENDOR_LIVE]
   FROM [dbo].[VENDOR] V
   INNER JOIN [dbo].[VENDOR_SERVICES] VS ON V.VENDOR_ID = VS.VENDOR_ID
   WHERE VS.SERVICE_ID = @pServiceId
END

GO

CREATE PROCEDURE [dbo].[usp_GetDashboardRecentOrdersByStatus]
(
	@pStatus int
)
AS
BEGIN

--ORDER_STATUS_ID	NAME
--1	            Requested
--2				Pending
--3				Accepted
--4				Confirmed
--5				Cancelled
--6				Completed
--7				Cancelled By Vendor
--8				Cancelled By Customer 

SET NOCOUNT ON;

DECLARE @VSQL NVARCHAR(MAX)

SET @VSQL = 'SELECT TOP 10 ORD.ORDER_ID, CUST.NAME AS CUSTOMER_NAME, VEN.NAME AS VENDOR_NAME, 
  SVCS.NAME AS SERVICE_NAME , OS.NAME AS ORDERSTATUS_NAME,
  ORD.REQUESTED_DATE
  FROM dbo.[ORDER] ORD
  INNER JOIN CUSTOMER CUST ON ORD.CUSTOMER_ID = CUST.CUSTOMER_ID
  INNER JOIN VENDOR_SERVICES VS ON ORD.VENDOR_SERVICE_ID = VS.VENDOR_SERVICE_ID
  INNER JOIN VENDOR VEN ON VS.VENDOR_ID= VEN.VENDOR_ID
  INNER JOIN dbo.[SERVICES] SVCS ON VS.SERVICE_ID = SVCS.SERVICE_ID 
  INNER JOIN ORDER_STATUS OS ON ORD.ORDER_STATUS_ID = OS.ORDER_STATUS_ID'
   
IF(@pStatus = 6)
BEGIN
	SET @VSQL = @VSQL + ' WHERE ORD.ORDER_STATUS_ID = @vStatus' 
END
ELSE
BEGIN
   SET @VSQL = @VSQL + ' WHERE ORD.ORDER_STATUS_ID IN(1,2,3,4)'
END

SET @VSQL = @VSQL + ' ORDER BY ORD.REQUESTED_DATE DESC'

EXEC SP_EXECUTESQL @VSQL,N'@vStatus int', @pStatus

END
GO
CREATE PROCEDURE [dbo].[usp_AddVendor]
(
  @pBaseRate float,
  @pEmailAddress nvarchar(max),
  @pIsVendorLive bit,
  @pIsVendorVerified bit,
  @pMobileNumber nvarchar(max),
  @pName nvarchar(max),
  @pNoOfEmployees int,
  --@pTimeSpentOnApp nvarchar(max),
  @pUserName nvarchar(max),
  @pAddressId binary(16),
  @pPassword nvarchar(max),
  @pDOB datetime,
  @pGender bit,
  @pPhoto nvarchar(max),
  @pAreOrdersBlocked bit,
  @pIsBlocked bit,
  @pIsPowerSeller bit,
  @pMonthlyCharge decimal

  --@pActiveTimePerDay nvarchar(max),
  --@pDataConsumption int,
  --@pCallsToCustomerCare int
)

AS
BEGIN
SET NOCOUNT ON;
DECLARE @vendorId Binary(16),
		@vendorCount int
SET @vendorId = NEWID()

SET @vendorCount = (SELECT COUNT(*) FROM VENDOR WHERE [USER_NAME] = @PUSERNAME)

if(@vendorCount = 0)
BEGIN
INSERT INTO VENDOR (VENDOR_ID, [USER_NAME], NAME, MOBILE_NUMBER, [PASSWORD], EMAIL_ADDRESS, ADDRESS_ID, EMPLOYEE_COUNT, BASE_RATE, IS_VENDOR_VERIFIED, IS_VENDOR_LIVE, DATE_OF_BIRTH, GENDER, PHOTO, ARE_ORDERS_BLOCKED, IS_BLOCKED,MONTHLY_CHARGE,IS_POWER_SELLER, REGISTERED_DATE) 
    VALUES (@vendorId, @pUserName, @pName, @pMobileNumber, @pPassword, @pEmailAddress, @pAddressId, @pNoOfEmployees, @pBaseRate,   @pIsVendorVerified,@pIsVendorLive, @pDOB, @pGender, @pPhoto, @pAreOrdersBlocked,@pIsBlocked,@pMonthlyCharge,@pIsPowerSeller, GETDATE())

	IF EXISTS (Select VENDOR_ID FROM dbo.VENDOR WHERE VENDOR_ID = @vendorId)
	BEGIN   
	-- If add Vendor success then only add the entry in Activity table
		DECLARE @pComment nvarchar(max)
		SET @pComment = CONCAT('Vendor ', @pName, ' registered.')
		EXEC [dbo].[usp_AddActivity] 'VENDOR', null, @vendorId, null, @pComment
	END

	SELECT @vendorId as VENDOR_ID
  END 
END
GO

CREATE PROCEDURE [dbo].[usp_AddVendorService]
(
	@pServiceId Binary(16),
	@pVendorId Binary(16),
	@pIsActive bit
)
AS
BEGIN

 INSERT INTO [dbo].[VENDOR_SERVICES] VALUES (NEWID(), @pVendorId, @pServiceId, @pIsActive)

END

GO

CREATE PROCEDURE [dbo].[usp_GetServicesForVendor]
(
	@pVendorId Binary(16)
)
AS
BEGIN

SET NOCOUNT ON;

SELECT SVCS.SERVICE_ID AS SERVICE_ID, SVCS.NAME AS SERVICE_NAME, IS_VENDOR_SERVICE_ACTIVE
  FROM VENDOR_SERVICES VS 
  INNER JOIN dbo.[SERVICES] SVCS ON VS.SERVICE_ID = SVCS.SERVICE_ID   
WHERE VENDOR_ID = @pVendorId

END

GO

CREATE PROCEDURE [dbo].[usp_DeleteVendorServices]
(
	@pVendorId Binary(16)
)
AS
BEGIN

SET NOCOUNT ON;

DELETE FROM VENDOR_SERVICES WHERE VENDOR_ID=@pVendorId

END

GO

CREATE PROCEDURE [dbo].[usp_GetDashboardMeters]
AS
BEGIN

SET NOCOUNT ON;

DECLARE @TOTAL_ORDERS int
DECLARE @TOTAL_VENDORS int
DECLARE @TOTAL_CUSTOMERS int
DECLARE @TOTAL_VENDOR_REVIEWS int
DECLARE @TOTAL_CUSTOMER_REVIEWS int
DECLARE @TOTAL_SERVICES int
DECLARE @TOTAL_USERS int 
DECLARE @TOTAL_PAYMENTS decimal

SELECT @TOTAL_ORDERS = Count(*) FROM dbo.[ORDER]

SELECT @TOTAL_VENDORS = Count(*) FROM dbo.[VENDOR] 

SELECT @TOTAL_CUSTOMERS = Count(*) FROM dbo.[CUSTOMER] 

SELECT @TOTAL_VENDOR_REVIEWS = Count(*) FROM dbo.[VENDOR_RATING] 

SELECT @TOTAL_CUSTOMER_REVIEWS = Count(*) FROM dbo.[CUSTOMER_RATING] 

SELECT @TOTAL_SERVICES = Count(*) FROM dbo.[SERVICES]     

--SELECT @TOTAL_USERS = Count(*) FROM dbo.[USER] 
SET @TOTAL_USERS =0

SELECT @TOTAL_PAYMENTS = SUM(AMOUNT) FROM dbo.[PAYMENTS]     

SELECT @TOTAL_ORDERS AS TOTAL_ORDERS, @TOTAL_VENDORS AS TOTAL_VENDORS, @TOTAL_CUSTOMERS AS TOTAL_CUSTOMERS, @TOTAL_VENDOR_REVIEWS AS TOTAL_VENDOR_REVIEWS, 
@TOTAL_CUSTOMER_REVIEWS AS TOTAL_CUSTOMER_REVIEWS, @TOTAL_USERS AS TOTAL_USERS, @TOTAL_SERVICES AS TOTAL_SERVICES, @TOTAL_PAYMENTS AS TOTAL_PAYMENTS
END

GO

CREATE PROCEDURE [dbo].[usp_GetVendorOverview]
(
	@pVendorId Binary(16)
)
AS
BEGIN

			DECLARE @TEMPORDER TABLE
			(
			   AMOUNT DECIMAL(18,0),
			   REQUESTEDDATE DATETIME
			);
			DECLARE  @ORDERSTODAY NVARCHAR(MAX),
			@ORDERSTHISWEEK NVARCHAR(MAX),
			@TOTALORDERS NVARCHAR(MAX),
			@TOTALORDERAMOUNT NVARCHAR(MAX),
			@WEEKORDERAMOUNT NVARCHAR(MAX),
			@BIGGESTORDERAMOUNT NVARCHAR(MAX),
			@AVERAGEMONTHLY NVARCHAR(MAX)


 INSERT INTO @TEMPORDER
  SELECT AMOUNT, REQUESTED_DATE FROM [ORDER] ORD
  LEFT JOIN dbo.VENDOR_SERVICES VS ON VS.VENDOR_SERVICE_ID = ORD.VENDOR_SERVICE_ID
  WHERE VS.VENDOR_ID = @pVendorId

  SET @ORDERSTODAY = (SELECT COUNT(*) FROM @TEMPORDER WHERE CAST(REQUESTEDDATE AS DATE) = (SELECT CONVERT(date, getdate())))
  SET @ORDERSTHISWEEK = (SELECT COUNT(*) FROM @TEMPORDER WHERE CAST(REQUESTEDDATE AS DATE)  >= DATEADD(DAY, 1-DATEPART(DW, GETDATE()), CONVERT(DATE,GETDATE())) 
						AND CAST(REQUESTEDDATE AS DATE) <  DATEADD(DAY, 8-DATEPART(DW, GETDATE()), CONVERT(DATE,GETDATE())))
  SET @TOTALORDERS = (SELECT COUNT(*) FROM @TEMPORDER)
  SET @TOTALORDERAMOUNT = (SELECT SUM(AMOUNT) FROM @TEMPORDER)
  SET @WEEKORDERAMOUNT = (SELECT SUM(AMOUNT) FROM @TEMPORDER WHERE CAST(REQUESTEDDATE AS DATE)  >= DATEADD(DAY, 1-DATEPART(DW, GETDATE()), CONVERT(DATE,GETDATE())) 
						AND CAST(REQUESTEDDATE AS DATE) <  DATEADD(DAY, 8-DATEPART(DW, GETDATE()), CONVERT(DATE,GETDATE())))

  SET @BIGGESTORDERAMOUNT = (SELECT MAX(AMOUNT) FROM @TEMPORDER)
  SET @AVERAGEMONTHLY = (SELECT SUM(AMOUNT) FROM @TEMPORDER  WHERE MONTH(REQUESTEDDATE) =MONTH(GETDATE()))


  SELECT @ORDERSTODAY AS ORDERS_TODAY,@ORDERSTHISWEEK AS ORDERS_THIS_WEEK,@TOTALORDERS AS TOTAL_ORDERS,
  @TOTALORDERAMOUNT AS TOTAL_ORDER_AMOUNT, @WEEKORDERAMOUNT AS WEEK_ORDER_AMOUNT,@BIGGESTORDERAMOUNT AS BIGGEST_ORDER_AMOUNT,@AVERAGEMONTHLY AS AVERAGE_MONTHLY,
  (SELECT NAME FROM VENDOR WHERE VENDOR.VENDOR_ID = @pVendorId) AS VENDOR_NAME

END

GO

CREATE PROCEDURE [dbo].[usp_GetVendorsByStatus]
(  
  @pVendorStatus int
)

AS
BEGIN

SET NOCOUNT ON;
IF(@pVendorStatus != 0)
SELECT V.[VENDOR_ID],[NAME],[USER_NAME],[MOBILE_NUMBER],[EMAIL_ADDRESS],[IS_VENDOR_LIVE]
   FROM [dbo].[VENDOR] V
   WHERE V.IS_VENDOR_LIVE = @pVendorStatus
ELSE
SELECT V.[VENDOR_ID],[NAME],[USER_NAME],[MOBILE_NUMBER],[EMAIL_ADDRESS],[IS_VENDOR_LIVE]
   FROM [dbo].[VENDOR] V
END


GO

CREATE PROCEDURE [dbo].[usp_DeactivateVendorServices]
(
	@pVendorId Binary(16)
)
AS
BEGIN

 UPDATE [dbo].[VENDOR_SERVICES] SET IS_VENDOR_SERVICE_ACTIVE = 0 WHERE VENDOR_ID = @pVendorId

END

GO


CREATE PROCEDURE [dbo].[usp_UpdateVendorService]
(
	@pServiceId Binary(16),
	@pVendorId Binary(16)
)
AS
BEGIN

DECLARE @SERVICECOUNT INT

SET @SERVICECOUNT = (SELECT COUNT(*) FROM [dbo].[VENDOR_SERVICES] WHERE VENDOR_ID = @pVendorId AND SERVICE_ID = @pServiceId)
IF(@SERVICECOUNT > 0)
UPDATE [dbo].[VENDOR_SERVICES] SET IS_VENDOR_SERVICE_ACTIVE = 1 WHERE VENDOR_ID = @pVendorId AND SERVICE_ID = @pServiceId
ELSE
 INSERT INTO [dbo].[VENDOR_SERVICES] VALUES (NEWID(), @pVendorId, @pServiceId, 1)

END

GO

CREATE PROCEDURE [dbo].[usp_UpdateVendorServices]
(
	@pVendorServiceId Binary(16),
	@pActivateService bit
)
AS
BEGIN

SET NOCOUNT ON;

IF(@pActivateService = 0)
  BEGIN
        IF(dbo.CheckIsParentServiceId(@pVendorServiceId) = 1)
			BEGIN
			 -- This is Parent Id so when Parent service is disabled then disable all the respective sub services as well.
			 -- First Disable Parent service
			  UPDATE VENDOR_SERVICES SET [IS_VENDOR_SERVICE_ACTIVE] = @pActivateService
              WHERE VENDOR_SERVICE_ID = @pVendorServiceId

			  DECLARE @VENDOR_ID Binary(16);
			  SELECT @VENDOR_ID = VENDOR_ID FROM VENDOR_SERVICES WHERE VENDOR_SERVICE_ID = @pVendorServiceId

			  DECLARE @PARENT_SERVICE_ID Binary(16);
			  SELECT @PARENT_SERVICE_ID = SERVICE_ID FROM VENDOR_SERVICES WHERE VENDOR_SERVICE_ID = @pVendorServiceId

			  --Disable SubServices
			  UPDATE VENDOR_SERVICES SET [IS_VENDOR_SERVICE_ACTIVE] = @pActivateService
              WHERE VENDOR_SERVICE_ID IN( SELECT VS.VENDOR_SERVICE_ID  FROM VENDOR_SERVICES VS 
              WHERE VS.SERVICE_ID IN(SELECT SERVICE_ID FROM SERVICES WHERE PARENT_SERVICE_ID = @PARENT_SERVICE_ID)
			  AND VS.VENDOR_ID = @VENDOR_ID)
			END
		ELSE
			BEGIN
			  UPDATE VENDOR_SERVICES SET [IS_VENDOR_SERVICE_ACTIVE] = @pActivateService
              WHERE VENDOR_SERVICE_ID = @pVendorServiceId 
			END
  END
ELSE
  BEGIN
       -- Enable Vendor Parent & Sub services individually.
       UPDATE VENDOR_SERVICES SET [IS_VENDOR_SERVICE_ACTIVE] = @pActivateService
       WHERE VENDOR_SERVICE_ID = @pVendorServiceId 
  END
END

GO
/****** Object:  StoredProcedure [dbo].[usp_GetAllCustomersByStatus]    Script Date: 09-07-2016 16:32:01 ******/


CREATE PROCEDURE [dbo].[usp_GetAllCustomersByStatus]
(
	@pStatus smallint
)
AS
BEGIN

	SET NOCOUNT ON;

	if(@pStatus = 0)
	BEGIN
		SELECT [CUSTOMER_ID]
			  ,[NAME]
			  ,[MOBILE_NUMBER]
			  ,[EMAIL_ADDRESS]
		FROM [dbo].[CUSTOMER] (NOLOCK)
	END
	ELSE
	BEGIN
		SELECT [CUSTOMER_ID]
			  ,[NAME]
			  ,[MOBILE_NUMBER]
			  ,[EMAIL_ADDRESS]
		FROM [dbo].[CUSTOMER] (NOLOCK)
		WHERE STATUS = @pStatus
	END
END

GO
CREATE PROCEDURE [dbo].[usp_GetCustomerRatingForOrders]
(
  @pCustomerId binary(16),
  @pNoOfRecords int
)

AS
BEGIN

SET NOCOUNT ON;

select top (@pNoOfRecords) C.NAME as Customer_Name, V.NAME as VENDOR_NAME, VR.ORDER_ID,VR.SERVICE_QUALITY, VR.PUNCTUALITY , VR.COURTESY , VR.PRICE,
ROUND(SUM(VR.SERVICE_QUALITY + VR.PUNCTUALITY + VR.COURTESY + VR.PRICE)/4,0) AS OVERALL_RATING
from vendor_rating VR 
join CUSTOMER C on VR.CUSTOMER_ID = C.Customer_Id
join VENDOR V on VR.VENDOR_ID = V.VENDOR_ID
where VR.CUSTOMER_ID = @pCustomerId
GROUP BY VR.VENDOR_RATING_ID, VR.SERVICE_QUALITY, VR.PUNCTUALITY, VR.COURTESY,VR.PRICE, VR.REVIEW_DATE, VR.COMMENTS, C.NAME, V.NAME, VR.ORDER_ID 
  ORDER BY REVIEW_DATE DESC

END

GO

CREATE FUNCTION [dbo].[GeneratePaymentId]()
RETURNS VARCHAR(MAX) 
AS 
-- Returns the New Order ID
BEGIN
    DECLARE @PAYMENT_ID VARCHAR(MAX);
    DECLARE @START_INDEX_PAYMENT_ID int;
    SET @START_INDEX_PAYMENT_ID = 1000;
    DECLARE @PAYMENT_COUNT int;
    
    SELECT @PAYMENT_COUNT = Count(*) FROM dbo.[PAYMENTS]
    
    IF(@PAYMENT_COUNT > 0)
      BEGIN
         SET @PAYMENT_ID = 'TASKOPAY' + CONVERT(varchar, @START_INDEX_PAYMENT_ID + @PAYMENT_COUNT)
      END
    ELSE 
      BEGIN
         SET @PAYMENT_ID = 'TASKOPAY' + CONVERT(varchar, @START_INDEX_PAYMENT_ID)
      END 
      
    RETURN @PAYMENT_ID;
END;

GO
CREATE PROCEDURE [dbo].[usp_AddPayment]
(  
  @pVendorId binary(16),
  @pDueDate Date,
  @pPaidDate Date,
  @pPaidAmount decimal,
  @pStatus nvarchar(50),
  @pDescription nvarchar(max),
  @pMonth nvarchar(50)
)

AS
BEGIN

SET NOCOUNT ON;

DECLARE @PaymentId nvarchar(max)
SET @PaymentId =  (SELECT [dbo].[GeneratePaymentId]())

INSERT INTO PAYMENTS VALUES (@PaymentId, @pVendorId, @pDueDate, @pPaidDate, @pPaidAmount, @pStatus, @pDescription, @pMonth)
IF EXISTS (SELECT PAYMENT_ID FROM dbo.PAYMENTS WHERE PAYMENT_ID = @PaymentId)
	BEGIN   
	IF (UPPER(@pStatus) = 'COMPLETED')
	  BEGIN
	-- If add Payment success and it is full payment then only update the DueDate in Vendor table
		UPDATE VENDOR SET DUE_DATE = @pDueDate WHERE VENDOR_ID = @pVendorId
	  END
	END
END

GO
CREATE PROCEDURE [dbo].[usp_UpdatePayment]
(  
  @pPaymentId nvarchar(50),
  @pVendorId binary(16),
  @pDueDate Date,
  @pPaidDate Date,
  @pPaidAmount decimal,
  @pStatus nvarchar(50),
  @pDescription nvarchar(max),
  @pMonth nvarchar(50)
)

AS
BEGIN

SET NOCOUNT ON;

UPDATE PAYMENTS SET VENDOR_ID = @pVendorId,DUE_DATE = @pDueDate, PAID_DATE = @pPaidDate, 
AMOUNT= @pPaidAmount, [STATUS] = @pStatus, [DESCRIPTION] = @pDescription, [MONTH] = @pMonth WHERE PAYMENT_ID = @pPaymentId 

END

GO
CREATE PROCEDURE [dbo].[usp_GetAllPaymentsByStatus]
(
	@pStatus nvarchar(50)
)
AS
BEGIN


SET NOCOUNT ON;

DECLARE @VSQL NVARCHAR(MAX)

SET @VSQL = 'SELECT [PAYMENT_ID] , PAY.[VENDOR_ID], VEN.[NAME] AS VENDOR_NAME, [DUE_DATE],[PAID_DATE],[AMOUNT],[STATUS],[DESCRIPTION],[MONTH]
  FROM dbo.[PAYMENTS] PAY  
  INNER JOIN VENDOR VEN ON PAY.VENDOR_ID= VEN.VENDOR_ID'
   
IF(@pStatus = 'PENDING')
BEGIN
	SET @VSQL = @VSQL + ' WHERE PAY.STATUS = @vStatus' 
END
ELSE IF(@pStatus = 'COMPLETED')
BEGIN
	SET @VSQL = @VSQL + ' WHERE PAY.STATUS = @vStatus' 
END
ELSE IF(@pStatus = 'ALL')
BEGIN
   SET @VSQL = @VSQL
END

SET @VSQL = @VSQL + ' ORDER BY PAY.PAYMENT_ID'

EXEC SP_EXECUTESQL @VSQL,N'@vStatus nvarchar(50)', @pStatus

END

GO
CREATE PROCEDURE [dbo].[usp_UpdateVendorDetails]
(
	@pVendorId binary(16),
	@pName nvarchar(max),
	@pMobileNumber nvarchar(max),  
	@pEmailAddress nvarchar(max),
	@pGender bit,
	@pDOB datetime,
	@pPhoto nvarchar(max),
	@pAreOrdersBlocked bit,
	@pIsPowerSeller bit,
	@pIsBlocked bit,
	@pMonthlyCharge decimal
)

AS
BEGIN

SET NOCOUNT ON;

UPDATE [dbo].VENDOR SET NAME = COALESCE(@pName,NAME),
						MOBILE_NUMBER = COALESCE(@pMobileNumber,MOBILE_NUMBER),	
						DATE_OF_BIRTH = COALESCE(@pDOB,DATE_OF_BIRTH),	
						GENDER = COALESCE(@pGender, GENDER),
						EMAIL_ADDRESS = COALESCE(@pEmailAddress, EMAIL_ADDRESS),
						PHOTO =  COALESCE(@pPhoto, PHOTO),
						ARE_ORDERS_BLOCKED = @pAreOrdersBlocked,
						IS_BLOCKED = @pIsBlocked,
						MONTHLY_CHARGE = @pMonthlyCharge,
						IS_POWER_SELLER = @pIsPowerSeller
WHERE VENDOR_ID = @pVendorId

END

GO

CREATE PROCEDURE [dbo].[usp_GetCustomerOverview]
(
	@pCustomerId Binary(16)
)
AS
BEGIN
	declare @TotalOrders int
	declare @WeeklyOrders int
	declare @TodayOrders int

	declare @TotalPayments int
	declare @Weeklypayments int
	declare @BiggestPayments int
	declare @MonthlyPayments int

	select @TodayOrders= count(1) from dbo.[order] where customer_id = @pCustomerId and requested_date = CONVERT(DATE,GETDATE(),101)

	select @WeeklyOrders=count(1) from dbo.[order] where customer_id = @pCustomerId and requested_date >= CONVERT(DATE,DATEADD(day,-7, GETDATE()),101)
	select @TotalOrders = count(1) from dbo.[order] where customer_id = @pCustomerId 

	select @TotalPayments = sum(Amount) from dbo.[order] where customer_id = @pCustomerId
	select @Weeklypayments = sum(Amount) from dbo.[order] where customer_id = @pCustomerId and requested_date >= CONVERT(DATE,DATEADD(day,-7, GETDATE()),101)
	select @MonthlyPayments = sum(Amount) from dbo.[order] where customer_id = @pCustomerId and requested_date >= CONVERT(DATE,DATEADD(day,-30, GETDATE()),101)
	select @BiggestPayments = MAX(Amount) from dbo.[order] where customer_id = @pCustomerId
	select @TotalOrders as Total_Orders,@WeeklyOrders as Weekly_Orders,@TodayOrders as Today_Orders,@TotalPayments as Total_Payments,@Weeklypayments as Weekly_Payments,
	@BiggestPayments as Biggest_Payments,@MonthlyPayments as Monthly_Payments, Name from customer where customer_id= @pCustomerId
END
GO
CREATE PROCEDURE [dbo].[usp_GetPayment]
(
	@pPaymentId nvarchar(50)
)
AS
BEGIN


SET NOCOUNT ON;

  SELECT [PAYMENT_ID] , PAY.[VENDOR_ID], VEN.[NAME] AS VENDOR_NAME, PAY.[DUE_DATE],[PAID_DATE],[AMOUNT],[STATUS],[DESCRIPTION],[MONTH]
  FROM dbo.[PAYMENTS] PAY  
  INNER JOIN VENDOR VEN ON PAY.VENDOR_ID= VEN.VENDOR_ID
  WHERE PAY.PAYMENT_ID = @pPaymentId

END

GO
CREATE PROCEDURE [dbo].[usp_GetVendorAddress]
(
  @pVendorId binary(16)
)

AS
BEGIN

SET NOCOUNT ON;

 SELECT Addr.ADDRESS_ID,COUNTRY,STATE,LATITIUDE ,LONGITUDE ,LOCALITY,CITY,ADDRESS,PINCODE
 FROM dbo.[ADDRESS] Addr
 INNER JOIN dbo.VENDOR V ON V.[ADDRESS_ID] = Addr.[Address_ID]
 WHERE V.VENDOR_ID = @pVendorId 
END
GO

CREATE PROCEDURE [dbo].[usp_GetAllUsers]

AS
BEGIN

select USER_ID, USER_NAME,NAME, PASSWORD,EMAIL_ADDRESS, MOBILE_NUMBER, ISADMIN, JOINED_DATE, ISACTIVE from [user]

END

GO

CREATE PROCEDURE [dbo].[usp_DeleteUser]
(
@pUserId Binary(16)
)
AS
BEGIN
	DELETE FROM dbo.[USER] where USER_ID = @pUserId
END
GO

CREATE PROCEDURE [dbo].[usp_AddUser]
(
  @pUserName varchar(50),
  @pPassword varchar(50),
  @pName nvarchar(max),
  @pEmailId nvarchar(max),
  @pPhoneNumber nvarchar(max),
  @pIsAdmin bit,
  @pIsActive bit
)

AS
BEGIN

declare @UserId binary(16)


declare @count smallint
select  @count= count(1) from dbo.[user] where USER_NAME = @pUserName
if(@count =0)
BEGIN
set @UserId = NEWID()
insert into dbo.[user] values(@UserId,@pUserName, @pName, @pPassword, @pEmailId,@pPhoneNumber, @pIsAdmin, GetDate(), @pIsActive)
END

select @UserId as user_id

END
GO

CREATE PROCEDURE [dbo].[usp_GetServiceOverview]
(
	@pServiceId Binary(16)
)
AS
BEGIN
	DECLARE @TotalPayments int
	DECLARE @Weeklypayments int
	DECLARE @BiggestPayments int
	DECLARE @MonthlyPayments int

	SELECT @TotalPayments = SUM(AMOUNT) FROM dbo.[ORDER] WHERE VENDOR_SERVICE_ID IN( SELECT VENDOR_SERVICE_ID FROM VENDOR_SERVICES WHERE SERVICE_ID= @pServiceId)
	SELECT @Weeklypayments = SUM(AMOUNT) FROM dbo.[ORDER] WHERE VENDOR_SERVICE_ID IN( SELECT VENDOR_SERVICE_ID FROM VENDOR_SERVICES WHERE SERVICE_ID= @pServiceId) AND REQUESTED_DATE >= CONVERT(DATE,DATEADD(day,-7, GETDATE()),101)
	SELECT @MonthlyPayments = SUM(AMOUNT) FROM dbo.[ORDER] WHERE VENDOR_SERVICE_ID IN( SELECT VENDOR_SERVICE_ID FROM VENDOR_SERVICES WHERE SERVICE_ID= @pServiceId) AND REQUESTED_DATE >= CONVERT(DATE,DATEADD(day,-30, GETDATE()),101)
	SELECT @BiggestPayments = MAX(Amount) FROM dbo.[ORDER] WHERE VENDOR_SERVICE_ID IN( SELECT VENDOR_SERVICE_ID FROM VENDOR_SERVICES WHERE SERVICE_ID= @pServiceId)
	SELECT @TotalPayments as TOTAL_PAYMENTS,@Weeklypayments as WEEKLY_PAYMENTS,
	@BiggestPayments as BIGGEST_PAYMENT,@MonthlyPayments as MONTHLY_PAYMENTS, NAME AS [SERVICE_NAME] FROM [SERVICES] WHERE SERVICE_ID = @pServiceId
END

GO

CREATE PROCEDURE [dbo].usp_LoginAdminUser
(
	@pUserName Varchar(max),
	@pPassword nvarchar(10)
	

)
AS
BEGIN

SET NOCOUNT ON;
DECLARE @TokenCode binary(16)
DECLARE @UserID binary(16)

SET @TokenCode = NEWId()
 
 IF @pUserName IS NOT NULL AND LEN(@pUserName) > 0 --username is passed
	BEGIN
		select @UserID= USER_ID FROM [USER] WHERE [USER_NAME] = @pUserName AND PASSWORD = @pPassword
	END
 
   IF(@UserID IS NOT NULL)
     BEGIN
	  INSERT INTO LOGGEDON_USER VALUES(@UserID, @TokenCode)
     END
  SELECT @TokenCode AS TOKEN_CODE, @UserID as USERID
END

GO

CREATE PROCEDURE [dbo].[usp_GetAllVendorsSummary]
AS
BEGIN

SET NOCOUNT ON;

SELECT [VENDOR_ID],[NAME],[USER_NAME],[MOBILE_NUMBER],[EMAIL_ADDRESS],[VENDOR_REF_ID],[IS_VENDOR_LIVE], [MONTHLY_CHARGE],[REGISTERED_DATE],[DUE_DATE]
FROM [dbo].[VENDOR]

END
GO

CREATE PROCEDURE [dbo].[usp_AddComplaint]
(
  @pComplaintStatus int,
  @pOrderId varchar(MAX),
  @pTitle varchar(MAX)
)

AS
BEGIN

SET NOCOUNT ON;

  DECLARE @ComplaintId Varchar(50)
  SET  @ComplaintId = dbo.GenerateComplaintID()

  INSERT INTO [dbo].[COMPLAINT] VALUES(@ComplaintId,@pTitle,NULL,GetDate(),GETDATE(),1,@pOrderId)

  SELECT @ComplaintId as COMPLAINT_ID
END

GO

CREATE PROCEDURE [dbo].[usp_AddComplaintChat]
(
  @pComplaintId varchar(MAX),
  @pChatContent varchar(MAX)
)

AS
BEGIN

SET NOCOUNT ON;

  INSERT INTO [dbo].[COMPLAINTCHAT] VALUES(NEWID(),@pComplaintId,@pChatContent,GetDate())

END

GO


CREATE PROCEDURE [dbo].[usp_GetCustomerComplaints]
(
	@pCustomerId Binary(16)
)
AS
BEGIN

SET NOCOUNT ON;

SELECT Complaint_Id, Complaint_Status,Logged_On_Date,Title
FROM [dbo].[Complaint] 
 INNER JOIN [ORDER] ORD ON ORD.CUSTOMER_ID = @pCustomerId 

END

GO


CREATE PROCEDURE [dbo].[usp_GetComplaints]
(
	@pCustomerStatus int
)
AS
BEGIN

SET NOCOUNT ON;

IF @pCustomerStatus <> 0	
SELECT Complaint_Id, Complaint_Status,Logged_On_Date,Title
FROM [dbo].[Complaint]  WHERE Complaint_Status = @pCustomerStatus

ELSE
SELECT Complaint_Id, Complaint_Status,Logged_On_Date,Title
FROM [dbo].[Complaint]
END

GO

CREATE PROCEDURE [dbo].[usp_StoreUser]
(
  @pName varchar(MAX),
  @pEmailAddress varchar(50),
  @pgcmRedId nvarchar(max)
)

AS
BEGIN

declare @UserId BINARY(16)


declare @count smallint
select  @count= count(1) from dbo.[GCM_USERS] where NAME = @pName
if(@count =0)
BEGIN
set @UserId = NEWID()
insert into dbo.[GCM_USERS] values(@UserId,@pgcmRedId, @pName, @pEmailAddress, GetDate())
END

select @UserId as user_id

END

GO

CREATE PROCEDURE [dbo].[usp_GetAllGCMUsers]

AS
BEGIN

SET NOCOUNT ON;

SELECT [GCMID]
      ,[GCMREGID]
      ,[NAME]
      ,[EMAILADDRESS]
  FROM [dbo].[GCM_USERS]
END
GO

CREATE PROCEDURE [dbo].[usp_GetGCMUserDetails]
(
  @pEmailAddress VARCHAR(max)
)

AS
BEGIN

SET NOCOUNT ON;

SELECT [GCMID]
      ,[GCMREGID]
      ,[NAME]
      ,[EMAILADDRESS]
  FROM [dbo].[GCM_USERS] where EMAILADDRESS=@pEmailAddress
END

GO

CREATE PROCEDURE [dbo].[usp_UpdateVendorLocation]
(
	@pLatitude nvarchar(max),
	@pLongitude nvarchar(max),
	@pVendorId nvarchar(max)
)

AS
BEGIN

SET NOCOUNT ON;
UPDATE A1 SET LONGITUDE= @pLongitude, LATITIUDE = @pLatitude FROM [ADDRESS] AS A1
INNER JOIN VENDOR ON VENDOR_ID = @pVendorId

END

GO